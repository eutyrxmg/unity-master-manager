// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters
{
    public sealed class MstBattleSkillDetailFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::MstBattleSkillDetail>
    {
        // BattleSkillId
        private static global::System.ReadOnlySpan<byte> GetSpan_BattleSkillId() => new byte[1 + 13] { 173, 66, 97, 116, 116, 108, 101, 83, 107, 105, 108, 108, 73, 100 };
        // Idx
        private static global::System.ReadOnlySpan<byte> GetSpan_Idx() => new byte[1 + 3] { 163, 73, 100, 120 };
        // SkillType
        private static global::System.ReadOnlySpan<byte> GetSpan_SkillType() => new byte[1 + 9] { 169, 83, 107, 105, 108, 108, 84, 121, 112, 101 };
        // Param1
        private static global::System.ReadOnlySpan<byte> GetSpan_Param1() => new byte[1 + 6] { 166, 80, 97, 114, 97, 109, 49 };
        // Param2
        private static global::System.ReadOnlySpan<byte> GetSpan_Param2() => new byte[1 + 6] { 166, 80, 97, 114, 97, 109, 50 };
        // Param3
        private static global::System.ReadOnlySpan<byte> GetSpan_Param3() => new byte[1 + 6] { 166, 80, 97, 114, 97, 109, 51 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::MstBattleSkillDetail value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(6);
            writer.WriteRaw(GetSpan_BattleSkillId());
            writer.Write(value.BattleSkillId);
            writer.WriteRaw(GetSpan_Idx());
            writer.Write(value.Idx);
            writer.WriteRaw(GetSpan_SkillType());
            writer.Write(value.SkillType);
            writer.WriteRaw(GetSpan_Param1());
            writer.Write(value.Param1);
            writer.WriteRaw(GetSpan_Param2());
            writer.Write(value.Param2);
            writer.WriteRaw(GetSpan_Param3());
            writer.Write(value.Param3);
        }

        public global::MstBattleSkillDetail Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadMapHeader();
            var __BattleSkillId__ = default(int);
            var __Idx__ = default(int);
            var __SkillType__ = default(int);
            var __Param1__ = default(int);
            var __Param2__ = default(int);
            var __Param3__ = default(int);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 13:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_BattleSkillId().Slice(1))) { goto FAIL; }

                        __BattleSkillId__ = reader.ReadInt32();
                        continue;
                    case 3:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7889993UL) { goto FAIL; }

                        __Idx__ = reader.ReadInt32();
                        continue;
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_SkillType().Slice(1))) { goto FAIL; }

                        __SkillType__ = reader.ReadInt32();
                        continue;
                    case 6:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 54345856082256UL:
                                __Param1__ = reader.ReadInt32();
                                continue;
                            case 55445367710032UL:
                                __Param2__ = reader.ReadInt32();
                                continue;
                            case 56544879337808UL:
                                __Param3__ = reader.ReadInt32();
                                continue;
                        }

                }
            }

            var ____result = new global::MstBattleSkillDetail(__BattleSkillId__, __Idx__, __SkillType__, __Param1__, __Param2__, __Param3__);
            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
