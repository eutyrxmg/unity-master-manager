// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters
{
    public sealed class MstMonsterFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::MstMonster>
    {
        // MonsterId
        private static global::System.ReadOnlySpan<byte> GetSpan_MonsterId() => new byte[1 + 9] { 169, 77, 111, 110, 115, 116, 101, 114, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Atk
        private static global::System.ReadOnlySpan<byte> GetSpan_Atk() => new byte[1 + 3] { 163, 65, 116, 107 };
        // Def
        private static global::System.ReadOnlySpan<byte> GetSpan_Def() => new byte[1 + 3] { 163, 68, 101, 102 };
        // Magic
        private static global::System.ReadOnlySpan<byte> GetSpan_Magic() => new byte[1 + 5] { 165, 77, 97, 103, 105, 99 };
        // Speed
        private static global::System.ReadOnlySpan<byte> GetSpan_Speed() => new byte[1 + 5] { 165, 83, 112, 101, 101, 100 };
        // BattleSkillId
        private static global::System.ReadOnlySpan<byte> GetSpan_BattleSkillId() => new byte[1 + 13] { 173, 66, 97, 116, 116, 108, 101, 83, 107, 105, 108, 108, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::MstMonster value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(7);
            writer.WriteRaw(GetSpan_MonsterId());
            writer.Write(value.MonsterId);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Atk());
            writer.Write(value.Atk);
            writer.WriteRaw(GetSpan_Def());
            writer.Write(value.Def);
            writer.WriteRaw(GetSpan_Magic());
            writer.Write(value.Magic);
            writer.WriteRaw(GetSpan_Speed());
            writer.Write(value.Speed);
            writer.WriteRaw(GetSpan_BattleSkillId());
            writer.Write(value.BattleSkillId);
        }

        public global::MstMonster Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __MonsterId__ = default(int);
            var __Name__ = default(string);
            var __Atk__ = default(int);
            var __Def__ = default(int);
            var __Magic__ = default(int);
            var __Speed__ = default(int);
            var __BattleSkillId__ = default(int);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_MonsterId().Slice(1))) { goto FAIL; }

                        __MonsterId__ = reader.ReadInt32();
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        __Name__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 3:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7042113UL:
                                __Atk__ = reader.ReadInt32();
                                continue;
                            case 6710596UL:
                                __Def__ = reader.ReadInt32();
                                continue;
                        }
                    case 5:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 426970145101UL:
                                __Magic__ = reader.ReadInt32();
                                continue;
                            case 431197876307UL:
                                __Speed__ = reader.ReadInt32();
                                continue;
                        }
                    case 13:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_BattleSkillId().Slice(1))) { goto FAIL; }

                        __BattleSkillId__ = reader.ReadInt32();
                        continue;

                }
            }

            var ____result = new global::MstMonster(__MonsterId__, __Name__, __Atk__, __Def__, __Magic__, __Speed__, __BattleSkillId__);
            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
