// <auto-generated />
#pragma warning disable CS0105
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using System.Collections.Generic;
using System;

namespace Model.Tables
{
   public sealed partial class MstBattleSkillDetailTable : TableBase<MstBattleSkillDetail>, ITableUniqueValidate
   {
        public Func<MstBattleSkillDetail, (int BattleSkillId, int Idx)> PrimaryKeySelector => primaryIndexSelector;
        readonly Func<MstBattleSkillDetail, (int BattleSkillId, int Idx)> primaryIndexSelector;


        public MstBattleSkillDetailTable(MstBattleSkillDetail[] sortedData)
            : base(sortedData)
        {
            this.primaryIndexSelector = x => (x.BattleSkillId, x.Idx);
            OnAfterConstruct();
        }

        partial void OnAfterConstruct();


        public MstBattleSkillDetail FindByBattleSkillIdAndIdx((int BattleSkillId, int Idx) key)
        {
            return FindUniqueCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<(int BattleSkillId, int Idx)>.Default, key, true);
        }
        
        public bool TryFindByBattleSkillIdAndIdx((int BattleSkillId, int Idx) key, out MstBattleSkillDetail result)
        {
            return TryFindUniqueCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<(int BattleSkillId, int Idx)>.Default, key, out result);
        }

        public MstBattleSkillDetail FindClosestByBattleSkillIdAndIdx((int BattleSkillId, int Idx) key, bool selectLower = true)
        {
            return FindUniqueClosestCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<(int BattleSkillId, int Idx)>.Default, key, selectLower);
        }

        public RangeView<MstBattleSkillDetail> FindRangeByBattleSkillIdAndIdx((int BattleSkillId, int Idx) min, (int BattleSkillId, int Idx) max, bool ascendant = true)
        {
            return FindUniqueRangeCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<(int BattleSkillId, int Idx)>.Default, min, max, ascendant);
        }


        void ITableUniqueValidate.ValidateUnique(ValidateResult resultSet)
        {
#if !DISABLE_MASTERMEMORY_VALIDATOR

            ValidateUniqueCore(data, primaryIndexSelector, "(BattleSkillId, Idx)", resultSet);       

#endif
        }

#if !DISABLE_MASTERMEMORY_METADATABASE

        public static MasterMemory.Meta.MetaTable CreateMetaTable()
        {
            return new MasterMemory.Meta.MetaTable(typeof(MstBattleSkillDetail), typeof(MstBattleSkillDetailTable), "battleSkillDetail",
                new MasterMemory.Meta.MetaProperty[]
                {
                    new MasterMemory.Meta.MetaProperty(typeof(MstBattleSkillDetail).GetProperty("BattleSkillId")),
                    new MasterMemory.Meta.MetaProperty(typeof(MstBattleSkillDetail).GetProperty("Idx")),
                    new MasterMemory.Meta.MetaProperty(typeof(MstBattleSkillDetail).GetProperty("SkillType")),
                    new MasterMemory.Meta.MetaProperty(typeof(MstBattleSkillDetail).GetProperty("Param1")),
                    new MasterMemory.Meta.MetaProperty(typeof(MstBattleSkillDetail).GetProperty("Param2")),
                    new MasterMemory.Meta.MetaProperty(typeof(MstBattleSkillDetail).GetProperty("Param3")),
                },
                new MasterMemory.Meta.MetaIndex[]{
                    new MasterMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(MstBattleSkillDetail).GetProperty("BattleSkillId"),
                        typeof(MstBattleSkillDetail).GetProperty("Idx"),
                    }, true, true, System.Collections.Generic.Comparer<(int BattleSkillId, int Idx)>.Default),
                });
        }

#endif
    }
}