// <auto-generated />
#pragma warning disable CS0105
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using System.Collections.Generic;
using System;

namespace Model.Tables
{
   public sealed partial class MstMonsterTable : TableBase<MstMonster>, ITableUniqueValidate
   {
        public Func<MstMonster, int> PrimaryKeySelector => primaryIndexSelector;
        readonly Func<MstMonster, int> primaryIndexSelector;

        readonly MstMonster[] secondaryIndex1;
        readonly Func<MstMonster, string> secondaryIndex1Selector;

        public MstMonsterTable(MstMonster[] sortedData)
            : base(sortedData)
        {
            this.primaryIndexSelector = x => x.MonsterId;
            this.secondaryIndex1Selector = x => x.Name;
            this.secondaryIndex1 = CloneAndSortBy(this.secondaryIndex1Selector, System.StringComparer.Ordinal);
            OnAfterConstruct();
        }

        partial void OnAfterConstruct();

        public RangeView<MstMonster> SortByName => new RangeView<MstMonster>(secondaryIndex1, 0, secondaryIndex1.Length - 1, true);

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public MstMonster FindByMonsterId(int key)
        {
            var lo = 0;
            var hi = data.Length - 1;
            while (lo <= hi)
            {
                var mid = (int)(((uint)hi + (uint)lo) >> 1);
                var selected = data[mid].MonsterId;
                var found = (selected < key) ? -1 : (selected > key) ? 1 : 0;
                if (found == 0) { return data[mid]; }
                if (found < 0) { lo = mid + 1; }
                else { hi = mid - 1; }
            }
            return ThrowKeyNotFound(key);
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public bool TryFindByMonsterId(int key, out MstMonster result)
        {
            var lo = 0;
            var hi = data.Length - 1;
            while (lo <= hi)
            {
                var mid = (int)(((uint)hi + (uint)lo) >> 1);
                var selected = data[mid].MonsterId;
                var found = (selected < key) ? -1 : (selected > key) ? 1 : 0;
                if (found == 0) { result = data[mid]; return true; }
                if (found < 0) { lo = mid + 1; }
                else { hi = mid - 1; }
            }
            result = default;
            return false;
        }

        public MstMonster FindClosestByMonsterId(int key, bool selectLower = true)
        {
            return FindUniqueClosestCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<int>.Default, key, selectLower);
        }

        public RangeView<MstMonster> FindRangeByMonsterId(int min, int max, bool ascendant = true)
        {
            return FindUniqueRangeCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<int>.Default, min, max, ascendant);
        }

        public RangeView<MstMonster> FindByName(string key)
        {
            return FindManyCore(secondaryIndex1, secondaryIndex1Selector, System.StringComparer.Ordinal, key);
        }

        public RangeView<MstMonster> FindClosestByName(string key, bool selectLower = true)
        {
            return FindManyClosestCore(secondaryIndex1, secondaryIndex1Selector, System.StringComparer.Ordinal, key, selectLower);
        }

        public RangeView<MstMonster> FindRangeByName(string min, string max, bool ascendant = true)
        {
            return FindManyRangeCore(secondaryIndex1, secondaryIndex1Selector, System.StringComparer.Ordinal, min, max, ascendant);
        }


        void ITableUniqueValidate.ValidateUnique(ValidateResult resultSet)
        {
#if !DISABLE_MASTERMEMORY_VALIDATOR

            ValidateUniqueCore(data, primaryIndexSelector, "MonsterId", resultSet);       

#endif
        }

#if !DISABLE_MASTERMEMORY_METADATABASE

        public static MasterMemory.Meta.MetaTable CreateMetaTable()
        {
            return new MasterMemory.Meta.MetaTable(typeof(MstMonster), typeof(MstMonsterTable), "monster",
                new MasterMemory.Meta.MetaProperty[]
                {
                    new MasterMemory.Meta.MetaProperty(typeof(MstMonster).GetProperty("MonsterId")),
                    new MasterMemory.Meta.MetaProperty(typeof(MstMonster).GetProperty("Name")),
                    new MasterMemory.Meta.MetaProperty(typeof(MstMonster).GetProperty("Atk")),
                    new MasterMemory.Meta.MetaProperty(typeof(MstMonster).GetProperty("Def")),
                    new MasterMemory.Meta.MetaProperty(typeof(MstMonster).GetProperty("Magic")),
                    new MasterMemory.Meta.MetaProperty(typeof(MstMonster).GetProperty("Speed")),
                    new MasterMemory.Meta.MetaProperty(typeof(MstMonster).GetProperty("BattleSkillId")),
                },
                new MasterMemory.Meta.MetaIndex[]{
                    new MasterMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(MstMonster).GetProperty("MonsterId"),
                    }, true, true, System.Collections.Generic.Comparer<int>.Default),
                    new MasterMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(MstMonster).GetProperty("Name"),
                    }, false, false, System.StringComparer.Ordinal),
                });
        }

#endif
    }
}